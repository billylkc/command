// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextClient is the client API for Text service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextClient interface {
	ExtractKeywords(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type textClient struct {
	cc grpc.ClientConnInterface
}

func NewTextClient(cc grpc.ClientConnInterface) TextClient {
	return &textClient{cc}
}

func (c *textClient) ExtractKeywords(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/pbuf.Text/ExtractKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextServer is the server API for Text service.
// All implementations must embed UnimplementedTextServer
// for forward compatibility
type TextServer interface {
	ExtractKeywords(context.Context, *Request) (*Reply, error)
	mustEmbedUnimplementedTextServer()
}

// UnimplementedTextServer must be embedded to have forward compatible implementations.
type UnimplementedTextServer struct {
}

func (UnimplementedTextServer) ExtractKeywords(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractKeywords not implemented")
}
func (UnimplementedTextServer) mustEmbedUnimplementedTextServer() {}

// UnsafeTextServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextServer will
// result in compilation errors.
type UnsafeTextServer interface {
	mustEmbedUnimplementedTextServer()
}

func RegisterTextServer(s grpc.ServiceRegistrar, srv TextServer) {
	s.RegisterService(&Text_ServiceDesc, srv)
}

func _Text_ExtractKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextServer).ExtractKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pbuf.Text/ExtractKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextServer).ExtractKeywords(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Text_ServiceDesc is the grpc.ServiceDesc for Text service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Text_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbuf.Text",
	HandlerType: (*TextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractKeywords",
			Handler:    _Text_ExtractKeywords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/text.proto",
}
